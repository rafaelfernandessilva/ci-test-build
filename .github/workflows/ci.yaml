name: "CI"  
run-name: "${{ github.event.repository.name }} | Lint & Scan Security "

on:
   push:
     branches:
       - main
      

permissions:
  id-token: write
  contents: read
  packages: write
  attestations: write
   

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
    
    lint_dockerfile:
      name: Lint Dockerfile
      runs-on: ubuntu-22.04
      
      steps:
        - name: "Checkout"
          uses: actions/checkout@v5
        - uses: hadolint/hadolint-action@v3.1.0
          with:
            dockerfile: Dockerfile
    
    
    trivy:
      name: Trivy Scan Security
      runs-on: ubuntu-22.04
      needs: lint_dockerfile
      
      steps:
        - name: "Checkout"
          uses: actions/checkout@v5
       
        - name: Run Trivy vulnerability scanner 
          uses: aquasecurity/trivy-action@0.33.1
          with:
            scan-type: 'fs'
            scan-ref: '.'
            severity: 'HIGH,CRITICAL'
            format: 'table'
            exit-code: 1
            

    build-and-push-image:
      runs-on: ubuntu-latest
      needs: [trivy, lint_dockerfile]
      outputs:
        image-digest: ${{ steps.push.outputs.digest }}
        image-tags: ${{ steps.meta.outputs.tags }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v5
        - name: Log in to the Container registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GHCR_TOKEN }}
        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        - name: Build and push Docker image
          id: push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
        - name: Generate artifact attestation
          uses: actions/attest-build-provenance@v3
          with:
            subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
            subject-digest: ${{ steps.push.outputs.digest }}
            push-to-registry: true
    
    output:
      runs-on: ubuntu-latest
      needs: build-and-push-image
      steps:
        - name: Checkout repository
          uses: actions/checkout@v5
        - name: Output
          run: |
            echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.image-digest }}"
            echo "Digest: ${{ needs.build-and-push-image.outputs.image-digest }}"
      

      